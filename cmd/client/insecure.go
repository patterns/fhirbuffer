// See https://github.com/johanbrandhorst/grpc-auth-example

package main

import (
	"crypto"
	"crypto/tls"
	"crypto/x509"
	"log"
)

const certPEM = `-----BEGIN CERTIFICATE-----
MIIE7DCCAtSgAwIBAgIBATANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDEwtjZXJ0
YXV0aGRldjAeFw0xOTAxMjMwNzQ0MjFaFw0yMDA3MjMwNzQ0MjFaMBYxFDASBgNV
BAMTC2NlcnRhdXRoZGV2MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
681fzRwlJS7wgHUlQnq8BwNR6N9Tly/tpbPdOqIOKxeci9mgMat2W3iXQP2Q1sYq
0ZrjkR7KkX6tA3+CFPTBCG5ntXLaIMqLN7CuN1Lhrkeho2fB3Vz6MEwK0O5wwOr0
vhKR0EmL4TxLsqUA0w9YGXXJ301qp9jpEykmlLh6FPTTAgPGKbdlJrZAxds77wct
jW1Of6PIQcjTcMTkfHNCVriVf1kYQxyekjO61H1ugqKAF//Nek4uV2OcQ5JVbKWi
H+2zXiBVuhmt4SHZ9bTMXsJLUED9Eg5EgTMpMkvMvflMF5+WkCA5wrLT5/4HXZNK
fcqE6lc9ct5YkD1pDu/dDYN9deJ5CChUvlFto0oZOi4pmxTaZR93UF4xxTsWrKVo
NYp4LaJW1sMtpFfMiVDkcH9JUh/ABdbDY0o9RQ0JAy3CwmXgJsrkH5MyHcuqJkgB
ClbG11tzKgun244osyrhF9kT87mt7OdihWihbMPUyofp3zKc36EqTG+t4UyhDyIM
r1Q+COtZTwf3JjIc/BK+oGHKcfIPXvLy9vJh9MgQsXVgnYfxoOD/GfkgqVgdnySj
6EZs8QLLG1I+vObsIMYlQ0wTbR4JOP/Vj+r5O9bIcGMwct5Bf/Bms1vAqMbOH4ih
Ggzm6vzDq2W5Mv1sJTkz6dFYGw6ITy6VMFyijdkXoksCAwEAAaNFMEMwDgYDVR0P
AQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFMLSN01vWCQi
hTYB2ybEJi0s6Zd6MA0GCSqGSIb3DQEBCwUAA4ICAQC8mi48OCv/nBpSP1wnV86I
tHsH6zSTOfQN+7oEgTy0cVZJqtdq5G83Gh3Kpj97/2/wZT3rJKDlbnspnERLBN8N
iOdwHFT9Prb5Pvp8JLKzScwihFUeRLHFjRLe6BvgNi0KHaLGQ/nL4D5w2U4oDG2W
2FxFm3Y0WAaACn+oX7hlYP8/x0iIiWkGKcd5TFkfhWq+L6iOl+xiWL4lzXWpxUO3
/d+4s//IIjSr7tDi0jngJ55h198FmstBuYDvaWBuvfnCNBroR5JB9Rp7FV++EUdV
4JPEW6Xx4sAvOeOOWvBEfQKWC7I4iAqQ0l7cPSwO7oACF6/QpFT21Ta/D6n/NcTf
LGXXgYFqAiMpmJB4DjgzhZD/Z8sY30BFojroIvGBVwxutJuSIabNQhWMeW7QI3rh
tGVEko0pE4RL+e3SFqynhQdBBi3ZvWFXlVup67iw0l4Q0tLiqCSVszFKvVhR9P3v
A1Y7RP+uDuw55jbF0qp7G6/6pG96qnyxVY/3Eo91kWCa43SIO4MPAdaZkoxFS4tI
Dm7guEJDZHVrGNL20kmPWsJQUtxS8/B+sV7H6iy6GYBvOmnboFR5mJ5cJbsmEEg3
qV2j/PFDN0PnzbwQzF9LlsCFJcTT8gJad8nkz5keUuP2+Fy1TVnkpM58SOJHiwG/
juZYwyZWQ4/ZLY0GUbRqOQ==
-----END CERTIFICATE-----
`

const keyPEM = `-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
`

var (
	// Key is the private key
	Key crypto.PrivateKey
	// Cert is a self signed certificate
	Cert tls.Certificate
	// CertPool contains the self signed certificate
	CertPool *x509.CertPool
)

func init() {
	var err error
	Cert, err = tls.X509KeyPair([]byte(certPEM), []byte(keyPEM))
	if err != nil {
		log.Fatalln("Failed to parse key pair:", err)
	}
	Cert.Leaf, err = x509.ParseCertificate(Cert.Certificate[0])
	if err != nil {
		log.Fatalln("Failed to parse certificate:", err)
	}

	CertPool = x509.NewCertPool()
	CertPool.AddCert(Cert.Leaf)

	Key = Cert.PrivateKey
}
